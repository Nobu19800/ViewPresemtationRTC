// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __DataBase_hh__
#define __DataBase_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_DataBase
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_DataBase
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_DataBase
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StringSeq;

class StringSeq_var;

class StringSeq : public _CORBA_Unbounded_Sequence_String {
public:
  typedef StringSeq_var _var_type;
  inline StringSeq() {}
  inline StringSeq(const StringSeq& _s)
    : _CORBA_Unbounded_Sequence_String(_s) {}

  inline StringSeq(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence_String(_max) {}
  inline StringSeq(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}



  inline StringSeq& operator = (const StringSeq& _s) {
    _CORBA_Unbounded_Sequence_String::operator=(_s);
    return *this;
  }
};

class StringSeq_out;

class StringSeq_var {
public:
  inline StringSeq_var() : _pd_seq(0) {}
  inline StringSeq_var(StringSeq* _s) : _pd_seq(_s) {}
  inline StringSeq_var(const StringSeq_var& _s) {
    if( _s._pd_seq )  _pd_seq = new StringSeq(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~StringSeq_var() { if( _pd_seq )  delete _pd_seq; }
    
  inline StringSeq_var& operator = (StringSeq* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline StringSeq_var& operator = (const StringSeq_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new StringSeq;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline StringSeq* operator -> () { return _pd_seq; }
  inline const StringSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator StringSeq& () const { return *_pd_seq; }
#else
  inline operator const StringSeq& () const { return *_pd_seq; }
  inline operator StringSeq& () { return *_pd_seq; }
#endif
    
  inline const StringSeq& in() const { return *_pd_seq; }
  inline StringSeq&       inout()    { return *_pd_seq; }
  inline StringSeq*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline StringSeq* _retn() { StringSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class StringSeq_out;
  
private:
  StringSeq* _pd_seq;
};

class StringSeq_out {
public:
  inline StringSeq_out(StringSeq*& _s) : _data(_s) { _data = 0; }
  inline StringSeq_out(StringSeq_var& _s)
    : _data(_s._pd_seq) { _s = (StringSeq*) 0; }
  inline StringSeq_out(const StringSeq_out& _s) : _data(_s._data) {}
  inline StringSeq_out& operator = (const StringSeq_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline StringSeq_out& operator = (StringSeq* _s) {
    _data = _s;
    return *this;
  }
  inline operator StringSeq*&()  { return _data; }
  inline StringSeq*& ptr()       { return _data; }
  inline StringSeq* operator->() { return _data; }

  inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  StringSeq*& _data;

private:
  StringSeq_out();
  StringSeq_out& operator=(const StringSeq_var&);
};

_CORBA_MODULE DataBase

_CORBA_MODULE_BEG

#ifndef __DataBase_mmDataBase__
#define __DataBase_mmDataBase__

  class mDataBase;
  class _objref_mDataBase;
  class _impl_mDataBase;
  
  typedef _objref_mDataBase* mDataBase_ptr;
  typedef mDataBase_ptr mDataBaseRef;

  class mDataBase_Helper {
  public:
    typedef mDataBase_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_mDataBase, mDataBase_Helper> mDataBase_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_mDataBase,mDataBase_Helper > mDataBase_out;

#endif

  // interface mDataBase
  class mDataBase {
  public:
    // Declarations for this interface type.
    typedef mDataBase_ptr _ptr_type;
    typedef mDataBase_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_mDataBase :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Boolean setConnection(const char* name, const char* usr_name, const char* passward);
    ::CORBA::Boolean executeQuery(const char* name, const char* con, const char* oSQL);
    ::CORBA::Boolean ResultSetNext(const char* name);
    ::CORBA::Boolean ResultSetPrevious(const char* name);
    ::CORBA::Boolean ResultSetFirst(const char* name);
    ::CORBA::Boolean ResultSetLast(const char* name);
    ::CORBA::Boolean ResultSetBeforeFirst(const char* name);
    ::CORBA::Boolean ResultSetAfterLast(const char* name);
    ::CORBA::Octet getByte(const char* name, ::CORBA::Short num);
    ::CORBA::Short getShort(const char* name, ::CORBA::Short num);
    ::CORBA::Long getLong(const char* name, ::CORBA::Short num);
    ::CORBA::Float getFloat(const char* name, ::CORBA::Short num);
    ::CORBA::Double getDouble(const char* name, ::CORBA::Short num);
    ::CORBA::Boolean getBoolean(const char* name, ::CORBA::Short num);
    char* getString(const char* name, ::CORBA::Short num);
    StringSeq* getDataBaseNames();
    StringSeq* getDataTableNames(const char* con);
    ::CORBA::Boolean executeUpdate(const char* con, const char* oSQL);
    ::CORBA::Short getRow(const char* name);
    ::CORBA::Boolean AddTable(const char* name, const char* con, const ::StringSeq& cols, const ::StringSeq& dt);
    ::CORBA::Boolean RemoveTable(const char* name, const char* con);
    ::CORBA::Boolean AddDataBase(const char* name);
    ::CORBA::Boolean RemoveDataBase(const char* name);

    inline _objref_mDataBase()  { _PR_setobj(0); }  // nil
    _objref_mDataBase(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_mDataBase();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_mDataBase(const _objref_mDataBase&);
    _objref_mDataBase& operator = (const _objref_mDataBase&);
    // not implemented

    friend class mDataBase;
  };

  class _pof_mDataBase : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_mDataBase() : _OMNI_NS(proxyObjectFactory)(mDataBase::_PD_repoId) {}
    virtual ~_pof_mDataBase();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_mDataBase :
    public virtual omniServant
  {
  public:
    virtual ~_impl_mDataBase();

    virtual ::CORBA::Boolean setConnection(const char* name, const char* usr_name, const char* passward) = 0;
    virtual ::CORBA::Boolean executeQuery(const char* name, const char* con, const char* oSQL) = 0;
    virtual ::CORBA::Boolean ResultSetNext(const char* name) = 0;
    virtual ::CORBA::Boolean ResultSetPrevious(const char* name) = 0;
    virtual ::CORBA::Boolean ResultSetFirst(const char* name) = 0;
    virtual ::CORBA::Boolean ResultSetLast(const char* name) = 0;
    virtual ::CORBA::Boolean ResultSetBeforeFirst(const char* name) = 0;
    virtual ::CORBA::Boolean ResultSetAfterLast(const char* name) = 0;
    virtual ::CORBA::Octet getByte(const char* name, ::CORBA::Short num) = 0;
    virtual ::CORBA::Short getShort(const char* name, ::CORBA::Short num) = 0;
    virtual ::CORBA::Long getLong(const char* name, ::CORBA::Short num) = 0;
    virtual ::CORBA::Float getFloat(const char* name, ::CORBA::Short num) = 0;
    virtual ::CORBA::Double getDouble(const char* name, ::CORBA::Short num) = 0;
    virtual ::CORBA::Boolean getBoolean(const char* name, ::CORBA::Short num) = 0;
    virtual char* getString(const char* name, ::CORBA::Short num) = 0;
    virtual StringSeq* getDataBaseNames() = 0;
    virtual StringSeq* getDataTableNames(const char* con) = 0;
    virtual ::CORBA::Boolean executeUpdate(const char* con, const char* oSQL) = 0;
    virtual ::CORBA::Short getRow(const char* name) = 0;
    virtual ::CORBA::Boolean AddTable(const char* name, const char* con, const ::StringSeq& cols, const ::StringSeq& dt) = 0;
    virtual ::CORBA::Boolean RemoveTable(const char* name, const char* con) = 0;
    virtual ::CORBA::Boolean AddDataBase(const char* name) = 0;
    virtual ::CORBA::Boolean RemoveDataBase(const char* name) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_mDataBase;

_CORBA_MODULE_END



_CORBA_MODULE POA_DataBase
_CORBA_MODULE_BEG

  class mDataBase :
    public virtual DataBase::_impl_mDataBase,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~mDataBase();

    inline ::DataBase::mDataBase_ptr _this() {
      return (::DataBase::mDataBase_ptr) _do_this(::DataBase::mDataBase::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_DataBase
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const StringSeq& _s);
void operator<<=(::CORBA::Any& _a, StringSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, StringSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const StringSeq*& _sp);

void operator<<=(::CORBA::Any& _a, DataBase::mDataBase_ptr _s);
void operator<<=(::CORBA::Any& _a, DataBase::mDataBase_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, DataBase::mDataBase_ptr& _s);



inline void
DataBase::mDataBase::_marshalObjRef(::DataBase::mDataBase_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_DataBase
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_DataBase
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_DataBase
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_DataBase
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_DataBase
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_DataBase
#endif

#endif  // __DataBase_hh__

