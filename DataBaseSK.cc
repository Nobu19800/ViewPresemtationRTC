// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "DataBase.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



DataBase::mDataBase_ptr DataBase::mDataBase_Helper::_nil() {
  return ::DataBase::mDataBase::_nil();
}

::CORBA::Boolean DataBase::mDataBase_Helper::is_nil(::DataBase::mDataBase_ptr p) {
  return ::CORBA::is_nil(p);

}

void DataBase::mDataBase_Helper::release(::DataBase::mDataBase_ptr p) {
  ::CORBA::release(p);
}

void DataBase::mDataBase_Helper::marshalObjRef(::DataBase::mDataBase_ptr obj, cdrStream& s) {
  ::DataBase::mDataBase::_marshalObjRef(obj, s);
}

DataBase::mDataBase_ptr DataBase::mDataBase_Helper::unmarshalObjRef(cdrStream& s) {
  return ::DataBase::mDataBase::_unmarshalObjRef(s);
}

void DataBase::mDataBase_Helper::duplicate(::DataBase::mDataBase_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

DataBase::mDataBase_ptr
DataBase::mDataBase::_duplicate(::DataBase::mDataBase_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

DataBase::mDataBase_ptr
DataBase::mDataBase::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


DataBase::mDataBase_ptr
DataBase::mDataBase::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

DataBase::mDataBase_ptr
DataBase::mDataBase::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_mDataBase _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_mDataBase* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_mDataBase;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* DataBase::mDataBase::_PD_repoId = "IDL:DataBase/mDataBase:1.0";


DataBase::_objref_mDataBase::~_objref_mDataBase() {
  
}


DataBase::_objref_mDataBase::_objref_mDataBase(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::DataBase::mDataBase::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
DataBase::_objref_mDataBase::_ptrToObjRef(const char* id)
{
  if( id == ::DataBase::mDataBase::_PD_repoId )
    return (::DataBase::mDataBase_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::DataBase::mDataBase::_PD_repoId) )
    return (::DataBase::mDataBase_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring_i_cstring
class _0RL_cd_BEFB14621E09F2BA_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_BEFB14621E09F2BA_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);

}

void _0RL_cd_BEFB14621E09F2BA_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_BEFB14621E09F2BA_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_BEFB14621E09F2BA_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_BEFB14621E09F2BA_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_00000000* tcd = (_0RL_cd_BEFB14621E09F2BA_00000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->setConnection(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean DataBase::_objref_mDataBase::setConnection(const char* name, const char* usr_name, const char* passward)
{
  _0RL_cd_BEFB14621E09F2BA_00000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_10000000, "setConnection", 14);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = usr_name;
  _call_desc.arg_2 = passward;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_20000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_00000000* tcd = (_0RL_cd_BEFB14621E09F2BA_00000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->executeQuery(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean DataBase::_objref_mDataBase::executeQuery(const char* name, const char* con, const char* oSQL)
{
  _0RL_cd_BEFB14621E09F2BA_00000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_20000000, "executeQuery", 13);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = con;
  _call_desc.arg_2 = oSQL;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring
class _0RL_cd_BEFB14621E09F2BA_30000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_30000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_BEFB14621E09F2BA_30000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_BEFB14621E09F2BA_30000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_BEFB14621E09F2BA_30000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_BEFB14621E09F2BA_30000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_BEFB14621E09F2BA_30000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_40000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_30000000* tcd = (_0RL_cd_BEFB14621E09F2BA_30000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->ResultSetNext(tcd->arg_0);


}

::CORBA::Boolean DataBase::_objref_mDataBase::ResultSetNext(const char* name)
{
  _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_40000000, "ResultSetNext", 14);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_30000000* tcd = (_0RL_cd_BEFB14621E09F2BA_30000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->ResultSetPrevious(tcd->arg_0);


}

::CORBA::Boolean DataBase::_objref_mDataBase::ResultSetPrevious(const char* name)
{
  _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_50000000, "ResultSetPrevious", 18);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_30000000* tcd = (_0RL_cd_BEFB14621E09F2BA_30000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->ResultSetFirst(tcd->arg_0);


}

::CORBA::Boolean DataBase::_objref_mDataBase::ResultSetFirst(const char* name)
{
  _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_60000000, "ResultSetFirst", 15);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_30000000* tcd = (_0RL_cd_BEFB14621E09F2BA_30000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->ResultSetLast(tcd->arg_0);


}

::CORBA::Boolean DataBase::_objref_mDataBase::ResultSetLast(const char* name)
{
  _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_70000000, "ResultSetLast", 14);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_30000000* tcd = (_0RL_cd_BEFB14621E09F2BA_30000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->ResultSetBeforeFirst(tcd->arg_0);


}

::CORBA::Boolean DataBase::_objref_mDataBase::ResultSetBeforeFirst(const char* name)
{
  _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_80000000, "ResultSetBeforeFirst", 21);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_30000000* tcd = (_0RL_cd_BEFB14621E09F2BA_30000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->ResultSetAfterLast(tcd->arg_0);


}

::CORBA::Boolean DataBase::_objref_mDataBase::ResultSetAfterLast(const char* name)
{
  _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_90000000, "ResultSetAfterLast", 19);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _coctet_i_cstring_i_cshort
class _0RL_cd_BEFB14621E09F2BA_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_a0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Short arg_1;
  ::CORBA::Octet result;
};

void _0RL_cd_BEFB14621E09F2BA_a0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_a0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Short&)arg_1 <<= _n;

}

void _0RL_cd_BEFB14621E09F2BA_a0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalOctet(result);

}

void _0RL_cd_BEFB14621E09F2BA_a0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalOctet();

}

const char* const _0RL_cd_BEFB14621E09F2BA_a0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_a0000000* tcd = (_0RL_cd_BEFB14621E09F2BA_a0000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->getByte(tcd->arg_0, tcd->arg_1);


}

::CORBA::Octet DataBase::_objref_mDataBase::getByte(const char* name, ::CORBA::Short num)
{
  _0RL_cd_BEFB14621E09F2BA_a0000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_b0000000, "getByte", 8);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = num;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cshort_i_cstring_i_cshort
class _0RL_cd_BEFB14621E09F2BA_c0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_c0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Short arg_1;
  ::CORBA::Short result;
};

void _0RL_cd_BEFB14621E09F2BA_c0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_c0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Short&)arg_1 <<= _n;

}

void _0RL_cd_BEFB14621E09F2BA_c0000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_c0000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Short&)result <<= _n;

}

const char* const _0RL_cd_BEFB14621E09F2BA_c0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_c0000000* tcd = (_0RL_cd_BEFB14621E09F2BA_c0000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->getShort(tcd->arg_0, tcd->arg_1);


}

::CORBA::Short DataBase::_objref_mDataBase::getShort(const char* name, ::CORBA::Short num)
{
  _0RL_cd_BEFB14621E09F2BA_c0000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_d0000000, "getShort", 9);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = num;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_cstring_i_cshort
class _0RL_cd_BEFB14621E09F2BA_e0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_e0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Short arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_BEFB14621E09F2BA_e0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_e0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Short&)arg_1 <<= _n;

}

void _0RL_cd_BEFB14621E09F2BA_e0000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_e0000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_BEFB14621E09F2BA_e0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_e0000000* tcd = (_0RL_cd_BEFB14621E09F2BA_e0000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->getLong(tcd->arg_0, tcd->arg_1);


}

::CORBA::Long DataBase::_objref_mDataBase::getLong(const char* name, ::CORBA::Short num)
{
  _0RL_cd_BEFB14621E09F2BA_e0000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_f0000000, "getLong", 8);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = num;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cfloat_i_cstring_i_cshort
class _0RL_cd_BEFB14621E09F2BA_01000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_01000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Short arg_1;
  ::CORBA::Float result;
};

void _0RL_cd_BEFB14621E09F2BA_01000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_01000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Short&)arg_1 <<= _n;

}

void _0RL_cd_BEFB14621E09F2BA_01000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_01000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Float&)result <<= _n;

}

const char* const _0RL_cd_BEFB14621E09F2BA_01000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_01000000* tcd = (_0RL_cd_BEFB14621E09F2BA_01000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->getFloat(tcd->arg_0, tcd->arg_1);


}

::CORBA::Float DataBase::_objref_mDataBase::getFloat(const char* name, ::CORBA::Short num)
{
  _0RL_cd_BEFB14621E09F2BA_01000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_11000000, "getFloat", 9);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = num;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cdouble_i_cstring_i_cshort
class _0RL_cd_BEFB14621E09F2BA_21000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_21000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Short arg_1;
  ::CORBA::Double result;
};

void _0RL_cd_BEFB14621E09F2BA_21000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_21000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Short&)arg_1 <<= _n;

}

void _0RL_cd_BEFB14621E09F2BA_21000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_21000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Double&)result <<= _n;

}

const char* const _0RL_cd_BEFB14621E09F2BA_21000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_21000000* tcd = (_0RL_cd_BEFB14621E09F2BA_21000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->getDouble(tcd->arg_0, tcd->arg_1);


}

::CORBA::Double DataBase::_objref_mDataBase::getDouble(const char* name, ::CORBA::Short num)
{
  _0RL_cd_BEFB14621E09F2BA_21000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_31000000, "getDouble", 10);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = num;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cshort
class _0RL_cd_BEFB14621E09F2BA_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_41000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Short arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_BEFB14621E09F2BA_41000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_41000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Short&)arg_1 <<= _n;

}

void _0RL_cd_BEFB14621E09F2BA_41000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_BEFB14621E09F2BA_41000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_BEFB14621E09F2BA_41000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_41000000* tcd = (_0RL_cd_BEFB14621E09F2BA_41000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->getBoolean(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean DataBase::_objref_mDataBase::getBoolean(const char* name, ::CORBA::Short num)
{
  _0RL_cd_BEFB14621E09F2BA_41000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_51000000, "getBoolean", 11);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = num;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring_i_cshort
class _0RL_cd_BEFB14621E09F2BA_61000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_61000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Short arg_1;
  ::CORBA::String_var result;
};

void _0RL_cd_BEFB14621E09F2BA_61000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_61000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Short&)arg_1 <<= _n;

}

void _0RL_cd_BEFB14621E09F2BA_61000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_BEFB14621E09F2BA_61000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_BEFB14621E09F2BA_61000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_61000000* tcd = (_0RL_cd_BEFB14621E09F2BA_61000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->getString(tcd->arg_0, tcd->arg_1);


}

char* DataBase::_objref_mDataBase::getString(const char* name, ::CORBA::Short num)
{
  _0RL_cd_BEFB14621E09F2BA_61000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_71000000, "getString", 10);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = num;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cStringSeq
class _0RL_cd_BEFB14621E09F2BA_81000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_81000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  StringSeq_var result;
};

void _0RL_cd_BEFB14621E09F2BA_81000000::marshalReturnedValues(cdrStream& _n)
{
  (const StringSeq&) result >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_81000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new StringSeq;
  (StringSeq&)result <<= _n;

}

const char* const _0RL_cd_BEFB14621E09F2BA_81000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_91000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_81000000* tcd = (_0RL_cd_BEFB14621E09F2BA_81000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->getDataBaseNames();


}

StringSeq* DataBase::_objref_mDataBase::getDataBaseNames()
{
  _0RL_cd_BEFB14621E09F2BA_81000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_91000000, "getDataBaseNames", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cStringSeq_i_cstring
class _0RL_cd_BEFB14621E09F2BA_a1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_a1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  StringSeq_var result;
};

void _0RL_cd_BEFB14621E09F2BA_a1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_BEFB14621E09F2BA_a1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_BEFB14621E09F2BA_a1000000::marshalReturnedValues(cdrStream& _n)
{
  (const StringSeq&) result >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_a1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new StringSeq;
  (StringSeq&)result <<= _n;

}

const char* const _0RL_cd_BEFB14621E09F2BA_a1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_b1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_a1000000* tcd = (_0RL_cd_BEFB14621E09F2BA_a1000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->getDataTableNames(tcd->arg_0);


}

StringSeq* DataBase::_objref_mDataBase::getDataTableNames(const char* con)
{
  _0RL_cd_BEFB14621E09F2BA_a1000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_b1000000, "getDataTableNames", 18);
  _call_desc.arg_0 = con;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring
class _0RL_cd_BEFB14621E09F2BA_c1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_c1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_BEFB14621E09F2BA_c1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_BEFB14621E09F2BA_c1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_BEFB14621E09F2BA_c1000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_BEFB14621E09F2BA_c1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_BEFB14621E09F2BA_c1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_d1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_c1000000* tcd = (_0RL_cd_BEFB14621E09F2BA_c1000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->executeUpdate(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean DataBase::_objref_mDataBase::executeUpdate(const char* con, const char* oSQL)
{
  _0RL_cd_BEFB14621E09F2BA_c1000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_d1000000, "executeUpdate", 14);
  _call_desc.arg_0 = con;
  _call_desc.arg_1 = oSQL;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cshort_i_cstring
class _0RL_cd_BEFB14621E09F2BA_e1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_e1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Short result;
};

void _0RL_cd_BEFB14621E09F2BA_e1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_BEFB14621E09F2BA_e1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_BEFB14621E09F2BA_e1000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_e1000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Short&)result <<= _n;

}

const char* const _0RL_cd_BEFB14621E09F2BA_e1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_f1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_e1000000* tcd = (_0RL_cd_BEFB14621E09F2BA_e1000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->getRow(tcd->arg_0);


}

::CORBA::Short DataBase::_objref_mDataBase::getRow(const char* name)
{
  _0RL_cd_BEFB14621E09F2BA_e1000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_f1000000, "getRow", 7);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring_i_cStringSeq_i_cStringSeq
class _0RL_cd_BEFB14621E09F2BA_02000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_BEFB14621E09F2BA_02000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  StringSeq_var arg_2_;
  const StringSeq* arg_2;
  StringSeq_var arg_3_;
  const StringSeq* arg_3;
  ::CORBA::Boolean result;
};

void _0RL_cd_BEFB14621E09F2BA_02000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const StringSeq&) *arg_2 >>= _n;
  (const StringSeq&) *arg_3 >>= _n;

}

void _0RL_cd_BEFB14621E09F2BA_02000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new StringSeq;
  (StringSeq&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();
  arg_3_ = new StringSeq;
  (StringSeq&)arg_3_ <<= _n;
  arg_3 = &arg_3_.in();

}

void _0RL_cd_BEFB14621E09F2BA_02000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_BEFB14621E09F2BA_02000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_BEFB14621E09F2BA_02000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_12000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_02000000* tcd = (_0RL_cd_BEFB14621E09F2BA_02000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->AddTable(tcd->arg_0, tcd->arg_1, *tcd->arg_2, *tcd->arg_3);


}

::CORBA::Boolean DataBase::_objref_mDataBase::AddTable(const char* name, const char* con, const ::StringSeq& cols, const ::StringSeq& dt)
{
  _0RL_cd_BEFB14621E09F2BA_02000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_12000000, "AddTable", 9);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = con;
  _call_desc.arg_2 = &(::StringSeq&) cols;
  _call_desc.arg_3 = &(::StringSeq&) dt;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_22000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_c1000000* tcd = (_0RL_cd_BEFB14621E09F2BA_c1000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->RemoveTable(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean DataBase::_objref_mDataBase::RemoveTable(const char* name, const char* con)
{
  _0RL_cd_BEFB14621E09F2BA_c1000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_22000000, "RemoveTable", 12);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = con;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_32000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_30000000* tcd = (_0RL_cd_BEFB14621E09F2BA_30000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->AddDataBase(tcd->arg_0);


}

::CORBA::Boolean DataBase::_objref_mDataBase::AddDataBase(const char* name)
{
  _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_32000000, "AddDataBase", 12);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_BEFB14621E09F2BA_42000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_BEFB14621E09F2BA_30000000* tcd = (_0RL_cd_BEFB14621E09F2BA_30000000*)cd;
  DataBase::_impl_mDataBase* impl = (DataBase::_impl_mDataBase*) svnt->_ptrToInterface(DataBase::mDataBase::_PD_repoId);
  tcd->result = impl->RemoveDataBase(tcd->arg_0);


}

::CORBA::Boolean DataBase::_objref_mDataBase::RemoveDataBase(const char* name)
{
  _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_42000000, "RemoveDataBase", 15);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
DataBase::_pof_mDataBase::~_pof_mDataBase() {}


omniObjRef*
DataBase::_pof_mDataBase::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::DataBase::_objref_mDataBase(ior, id);
}


::CORBA::Boolean
DataBase::_pof_mDataBase::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::DataBase::mDataBase::_PD_repoId) )
    return 1;
  
  return 0;
}

const DataBase::_pof_mDataBase _the_pof_DataBase_mmDataBase;

DataBase::_impl_mDataBase::~_impl_mDataBase() {}


::CORBA::Boolean
DataBase::_impl_mDataBase::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "setConnection") ) {

    _0RL_cd_BEFB14621E09F2BA_00000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_10000000, "setConnection", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "executeQuery") ) {

    _0RL_cd_BEFB14621E09F2BA_00000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_20000000, "executeQuery", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ResultSetNext") ) {

    _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_40000000, "ResultSetNext", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ResultSetPrevious") ) {

    _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_50000000, "ResultSetPrevious", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ResultSetFirst") ) {

    _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_60000000, "ResultSetFirst", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ResultSetLast") ) {

    _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_70000000, "ResultSetLast", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ResultSetBeforeFirst") ) {

    _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_80000000, "ResultSetBeforeFirst", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ResultSetAfterLast") ) {

    _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_90000000, "ResultSetAfterLast", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getByte") ) {

    _0RL_cd_BEFB14621E09F2BA_a0000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_b0000000, "getByte", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getShort") ) {

    _0RL_cd_BEFB14621E09F2BA_c0000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_d0000000, "getShort", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getLong") ) {

    _0RL_cd_BEFB14621E09F2BA_e0000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_f0000000, "getLong", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFloat") ) {

    _0RL_cd_BEFB14621E09F2BA_01000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_11000000, "getFloat", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDouble") ) {

    _0RL_cd_BEFB14621E09F2BA_21000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_31000000, "getDouble", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getBoolean") ) {

    _0RL_cd_BEFB14621E09F2BA_41000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_51000000, "getBoolean", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getString") ) {

    _0RL_cd_BEFB14621E09F2BA_61000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_71000000, "getString", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDataBaseNames") ) {

    _0RL_cd_BEFB14621E09F2BA_81000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_91000000, "getDataBaseNames", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDataTableNames") ) {

    _0RL_cd_BEFB14621E09F2BA_a1000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_b1000000, "getDataTableNames", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "executeUpdate") ) {

    _0RL_cd_BEFB14621E09F2BA_c1000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_d1000000, "executeUpdate", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getRow") ) {

    _0RL_cd_BEFB14621E09F2BA_e1000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_f1000000, "getRow", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "AddTable") ) {

    _0RL_cd_BEFB14621E09F2BA_02000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_12000000, "AddTable", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "RemoveTable") ) {

    _0RL_cd_BEFB14621E09F2BA_c1000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_22000000, "RemoveTable", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "AddDataBase") ) {

    _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_32000000, "AddDataBase", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "RemoveDataBase") ) {

    _0RL_cd_BEFB14621E09F2BA_30000000 _call_desc(_0RL_lcfn_BEFB14621E09F2BA_42000000, "RemoveDataBase", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
DataBase::_impl_mDataBase::_ptrToInterface(const char* id)
{
  if( id == ::DataBase::mDataBase::_PD_repoId )
    return (::DataBase::_impl_mDataBase*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::DataBase::mDataBase::_PD_repoId) )
    return (::DataBase::_impl_mDataBase*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
DataBase::_impl_mDataBase::_mostDerivedRepoId()
{
  return ::DataBase::mDataBase::_PD_repoId;
}

POA_DataBase::mDataBase::~mDataBase() {}

